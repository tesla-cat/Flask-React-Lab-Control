{"version":3,"sources":["screens/NotFoundScreen.tsx","constants/Colors.ts","screens/TabOneScreen.tsx","components/EditScreenInfo.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf","assets/images/HAL-9000.png"],"names":["NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","dataDB","firestore","collection","Dimensions","get","isPC","width","height","Data","useState","data","setData","useEffect","doc","onSnapshot","res","listenData","varList","json","JSON","parse","parseData","ScrollView","contentContainerStyle","flexDirection","flexWrap","ys","map","y","idx","x","xs","Fig","id","xl","l","yl","p","show","setShow","log","setLog","arr","a","Math","log10","font","family","size","layout","xaxis","yaxis","display","margin","marginLeft","length","toExponential","marginHorizontal","Switch","value","onValueChange","Button","developmentModeText","marginBottom","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","resizeMode","getStartedContainer","homeScreenFilename","marginVertical","codeHighlightText","codeHighlightContainer","borderRadius","paddingHorizontal","getStartedText","helpContainer","helpLink","helpLinkText","separator","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Colors","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","props","Ionicons","TabOneStack","createStackNavigator","TabOneScreen","headerTitle","Image","source","uri","require","href","target","prefixes","Linking","config","screens","Root","TabOne","TabTwo","TabTwoScreen","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","React","isLoadingComplete","setLoadingComplete","async","SplashScreen","Font","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.d887e168.chunk.js","sourcesContent":["import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import React, {useEffect, useState} from 'react'\nimport { Text, View, ScrollView, Switch, Button, Dimensions } from 'react-native'\n\n//======================================\nimport firebase from \"firebase/app\"\nimport \"firebase/firestore\"\nimport Plot from 'react-plotly.js'\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyDuNZv1DauGOJWmbemUzCkXajt5La0wN-A\",\n  authDomain: \"qcrew2021.firebaseapp.com\",\n  projectId: \"qcrew2021\",\n  storageBucket: \"qcrew2021.appspot.com\",\n  messagingSenderId: \"197393268910\",\n  appId: \"1:197393268910:web:e9a8c373956c84b9ddad3f\",\n  measurementId: \"G-80EYHZ0BF4\"\n})\nconst db = firebase.firestore()\nconst dataDB = db.collection('data')\n//======================================\n\nconst {width, height} = Dimensions.get('window')\nconst isPC = width > height\n\ntype dataType = { json?: string, time?: any }\ntype varListType = {\n  xs: { l: string, x: number[] }[],\n  ys: { l: string, y: number[], x: number }[],\n}\n\nexport default function Data(){\n  const [data, setData] = useState<dataType>({})\n  useEffect(()=>{ listenData(setData) },[])\n  \n  const varList: varListType = parseData(data)\n  if(!varList) return null\n  return(\n    <ScrollView contentContainerStyle={{flexDirection: 'row', flexWrap:'wrap', justifyContent:'center'}}>\n      {varList.ys.map((y, idx)=>{\n        const x = varList.xs[y.x]\n        return <Fig id={`fig${idx}`} x={x.x} y={y.y} xl={x.l} yl={y.l}/>\n      })}\n    </ScrollView>\n  )\n}\n\ntype FigType = { id: string, x: number[], y: number[], xl: string, yl: string }\nfunction Fig(p: FigType){\n  const [show, setShow] = useState(true)\n  const [log, setLog] = useState(false)\n  useEffect(()=>{\n    setShow(false)\n  },[])\n  const data = [ { x: p.x, y:  log? logFn(p.y): p.y } ]\n  const font = { family: 'Courier New, monospace', size: 18, color: '#7f7f7f' }\n  const layout = { xaxis: { title: { text: p.xl, font } }, yaxis: { title: { text: p.yl, font } } } \n  const display = show?'flex':'none'\n  return(\n    <View style={{width: isPC? '60%':'100%', margin: isPC? 10: 0 }}>\n      <View style={{flexDirection: 'row', padding: 10, alignItems:'center'}}>\n        <Text style={{flex: 1, fontSize: 20, fontWeight:'bold', marginLeft: 10}}>\n          {p.yl}\n        </Text>\n        <Text style={{flex: 1, fontSize: 20, fontWeight:'bold', marginLeft: 10, color:'blue'}}>\n          {last(p.y).toExponential(4)}\n        </Text>\n        <View style={{alignItems:'center', marginHorizontal:20, display}}>\n          <Switch value={log} onValueChange={setLog}/>\n          <Text>log10</Text>\n        </View>\n        <Button title={show? 'hide': 'plot'} onPress={()=>{ setShow(!show) }}></Button>\n      </View>\n      <View style={{flex: 1, display}}>\n        <Plot data={data} layout={layout}/>\n      </View>\n    </View>\n  )\n}\n\nfunction logFn(arr: number[]){ return arr.map(a=> Math.log10(a) ) }\nfunction last(a: any[]){ return a[a.length-1] }\n\nfunction parseData(data: dataType){\n  if(data.json) return JSON.parse(data.json)\n}\n\nfunction listenData(setData: React.Dispatch<React.SetStateAction<dataType>>){\n  dataDB.doc('qcrew').onSnapshot((res)=>{\n    const data = res.data() \n    if(data) setData(data)\n  })\n}","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen:\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Tab Two</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nimport {View, Text, Image} from 'react-native'\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"TabOne\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      {null && <BottomTab.Screen\n        name=\"TabTwo\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />}\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: React.ComponentProps<typeof Ionicons>['name']; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: ()=>(\n          <View style={{flexDirection:'row', alignItems:'center'}}>\n            <Image\n              style={{height:40, width: 40}}\n              source={{uri: require('../assets/images/HAL-9000.png')}}\n            /> \n            <Text style={{fontSize:20, fontWeight:'bold', color:'blue', marginHorizontal:20}}>\n              HAL 9000\n            </Text>\n            <a style={{color:'grey'}} \n              href='https://github.com/tesla-cat/LabTools/tree/master/LabMonitor'\n              target='_blanck'\n            >src</a>\n          </View>\n        )}}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Tab Two Title' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('https://tesla-cat.github.io/LabTools')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'LabTools',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'LabTools/two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";","module.exports = __webpack_public_path__ + \"static/media/HAL-9000.dc099622.png\";"],"sourceRoot":""}